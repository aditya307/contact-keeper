{"ast":null,"code":"import _toConsumableArray from\"D:\\\\js\\\\contact-keeper\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"D:\\\\js\\\\contact-keeper\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{ADD_CONTACT,DELETE_CONTACT,SET_CURRENT,CLEAR_CURRENT,UPDATE_CONTACT,FILTER_CONTACTS,CLEAR_FILTER,CONTACT_ERROR,GET_CONTACTS,CLEAR_CONTACTS}from'../types';export default(function(state,action){switch(action.type){case GET_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:action.payload,loading:false});case ADD_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:[action.payload].concat(_toConsumableArray(state.contacts)),loading:false});case DELETE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:_toConsumableArray(state.contacts.filter(function(contact){return contact._id!==action.payload;})),loading:false});case CLEAR_CONTACTS:return _objectSpread(_objectSpread({},state),{},{contacts:null,filterd:null,error:null,current:null});case SET_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:action.payload});case CLEAR_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:null});case UPDATE_CONTACT:return _objectSpread(_objectSpread({},state),{},{contacts:state.contacts.map(function(contact){return contact._id===action.payload._id?action.payload:contact;}),loading:false});case FILTER_CONTACTS:return _objectSpread(_objectSpread({},state),{},{filterd:state.contacts.filter(function(contact){var regez=new RegExp(\"\".concat(action.payload),'gi');return contact.name.match(regez)||contact.email.match(regez);})});case CLEAR_FILTER:return _objectSpread(_objectSpread({},state),{},{filterd:null});case CONTACT_ERROR:return _objectSpread(_objectSpread({},state),{},{error:action.payload});default:return state;}});","map":{"version":3,"sources":["D:/js/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","GET_CONTACTS","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","filter","contact","_id","filterd","error","current","map","regez","RegExp","name","match","email"],"mappings":"2TAAA,OACEA,WADF,CAEEC,cAFF,CAGEC,WAHF,CAIEC,aAJF,CAKEC,cALF,CAMEC,eANF,CAOEC,YAPF,CAQEC,aARF,CASEC,YATF,CAUEC,cAVF,KAWO,UAXP,CAaA,eAAe,SAACC,KAAD,CAAQC,MAAR,CAAmB,CAChC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKJ,CAAAA,YAAL,CACE,sCACKE,KADL,MAEEG,QAAQ,CAAEF,MAAM,CAACG,OAFnB,CAGEC,OAAO,CAAE,KAHX,GAKF,IAAKf,CAAAA,WAAL,CACE,sCACKU,KADL,MAEEG,QAAQ,EAAGF,MAAM,CAACG,OAAV,4BAAsBJ,KAAK,CAACG,QAA5B,EAFV,CAGEE,OAAO,CAAE,KAHX,GAKF,IAAKd,CAAAA,cAAL,CACE,sCACKS,KADL,MAEEG,QAAQ,oBACHH,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsB,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAApC,EAAtB,CADG,CAFV,CAKEC,OAAO,CAAE,KALX,GAOF,IAAKN,CAAAA,cAAL,CACE,sCACKC,KADL,MAEEG,QAAQ,CAAE,IAFZ,CAGEM,OAAO,CAAE,IAHX,CAIEC,KAAK,CAAE,IAJT,CAKEC,OAAO,CAAE,IALX,GAOF,IAAKnB,CAAAA,WAAL,CACE,sCACKQ,KADL,MAEEW,OAAO,CAAEV,MAAM,CAACG,OAFlB,GAIF,IAAKX,CAAAA,aAAL,CACE,sCACKO,KADL,MAEEW,OAAO,CAAE,IAFX,GAIF,IAAKjB,CAAAA,cAAL,CACE,sCACKM,KADL,MAEEG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeS,GAAf,CAAmB,SAAAL,OAAO,QAClCA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAAP,CAAeI,GAA/B,CAAqCP,MAAM,CAACG,OAA5C,CAAsDG,OADpB,EAA1B,CAFZ,CAKEF,OAAO,CAAE,KALX,GAOF,IAAKV,CAAAA,eAAL,CACE,sCACKK,KADL,MAEES,OAAO,CAAET,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsB,SAACC,OAAD,CAAa,CAC1C,GAAMM,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,WAAcb,MAAM,CAACG,OAArB,EAAgC,IAAhC,CAAd,CACA,MAAOG,CAAAA,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,GAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC,CACD,CAHQ,CAFX,GAOF,IAAKjB,CAAAA,YAAL,CACE,sCACKI,KADL,MAEES,OAAO,CAAE,IAFX,GAIF,IAAKZ,CAAAA,aAAL,CACE,sCACKG,KADL,MAEEU,KAAK,CAAET,MAAM,CAACG,OAFhB,GAIF,QACE,MAAOJ,CAAAA,KAAP,CAlEJ,CAoED,CArED","sourcesContent":["import {\r\n  ADD_CONTACT,\r\n  DELETE_CONTACT,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  UPDATE_CONTACT,\r\n  FILTER_CONTACTS,\r\n  CLEAR_FILTER,\r\n  CONTACT_ERROR,\r\n  GET_CONTACTS,\r\n  CLEAR_CONTACTS,\r\n} from '../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case GET_CONTACTS:\r\n      return {\r\n        ...state,\r\n        contacts: action.payload,\r\n        loading: false,\r\n      };\r\n    case ADD_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: [action.payload, ...state.contacts],\r\n        loading: false,\r\n      };\r\n    case DELETE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: [\r\n          ...state.contacts.filter((contact) => contact._id !== action.payload),\r\n        ],\r\n        loading: false,\r\n      };\r\n    case CLEAR_CONTACTS:\r\n      return {\r\n        ...state,\r\n        contacts: null,\r\n        filterd: null,\r\n        error: null,\r\n        current: null,\r\n      };\r\n    case SET_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: action.payload,\r\n      };\r\n    case CLEAR_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: null,\r\n      };\r\n    case UPDATE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map(contact =>\r\n          contact._id === action.payload._id ? action.payload : contact\r\n        ),\r\n        loading: false,\r\n      };\r\n    case FILTER_CONTACTS:\r\n      return {\r\n        ...state,\r\n        filterd: state.contacts.filter((contact) => {\r\n          const regez = new RegExp(`${action.payload}`, 'gi');\r\n          return contact.name.match(regez) || contact.email.match(regez);\r\n        }),\r\n      };\r\n    case CLEAR_FILTER:\r\n      return {\r\n        ...state,\r\n        filterd: null,\r\n      };\r\n    case CONTACT_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}