{"ast":null,"code":"import React,{useContext,useRef,useEffect}from'react';import ContactContext from'../../context/contact/contactContext';var ContactFilter=function ContactFilter(){var contactContext=useContext(ContactContext);var filterContact=contactContext.filterContact,clearFilter=contactContext.clearFilter,filterd=contactContext.filterd;var text=useRef('');useEffect(function(){if(filterd===null){text.current.value='';}});var onChange=function onChange(e){if(text.current.value!==''){filterContact(e.target.value);}else{clearFilter();}};return/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(\"input\",{ref:text,type:\"text\",placeholder:\"Filter Contacts...\",onChange:onChange}));};export default ContactFilter;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/contact-keeper/client/src/components/contacts/ContactFilter.js"],"names":["React","useContext","useRef","useEffect","ContactContext","ContactFilter","contactContext","filterContact","clearFilter","filterd","text","current","value","onChange","e","target"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,MAA5B,CAAoCC,SAApC,KAAqD,OAArD,CACA,MAAOC,CAAAA,cAAP,KAA2B,sCAA3B,CACA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAMC,CAAAA,cAAc,CAAGL,UAAU,CAACG,cAAD,CAAjC,CAD0B,GAElBG,CAAAA,aAFkB,CAEsBD,cAFtB,CAElBC,aAFkB,CAEHC,WAFG,CAEsBF,cAFtB,CAEHE,WAFG,CAEUC,OAFV,CAEsBH,cAFtB,CAEUG,OAFV,CAG1B,GAAMC,CAAAA,IAAI,CAAGR,MAAM,CAAC,EAAD,CAAnB,CAEAC,SAAS,CAAC,UAAM,CACd,GAAIM,OAAO,GAAK,IAAhB,CAAsB,CACpBC,IAAI,CAACC,OAAL,CAAaC,KAAb,CAAqB,EAArB,CACD,CACF,CAJQ,CAAT,CAKA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,CAAD,CAAO,CACtB,GAAIJ,IAAI,CAACC,OAAL,CAAaC,KAAb,GAAuB,EAA3B,CAA+B,CAC7BL,aAAa,CAACO,CAAC,CAACC,MAAF,CAASH,KAAV,CAAb,CACD,CAFD,IAEO,CACLJ,WAAW,GACZ,CACF,CAND,CAOA,mBACE,6CACE,6BACE,GAAG,CAAEE,IADP,CAEE,IAAI,CAAC,MAFP,CAGE,WAAW,CAAC,oBAHd,CAIE,QAAQ,CAAEG,QAJZ,EADF,CADF,CAUD,CA3BD,CA6BA,cAAeR,CAAAA,aAAf","sourcesContent":["import React, { useContext, useRef, useEffect } from 'react';\r\nimport ContactContext from '../../context/contact/contactContext';\r\nconst ContactFilter = () => {\r\n  const contactContext = useContext(ContactContext);\r\n  const { filterContact, clearFilter, filterd } = contactContext;\r\n  const text = useRef('');\r\n\r\n  useEffect(() => {\r\n    if (filterd === null) {\r\n      text.current.value = '';\r\n    }\r\n  });\r\n  const onChange = (e) => {\r\n    if (text.current.value !== '') {\r\n      filterContact(e.target.value);\r\n    } else {\r\n      clearFilter();\r\n    }\r\n  };\r\n  return (\r\n    <form>\r\n      <input\r\n        ref={text}\r\n        type='text'\r\n        placeholder='Filter Contacts...'\r\n        onChange={onChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactFilter;\r\n"]},"metadata":{},"sourceType":"module"}